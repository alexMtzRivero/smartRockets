<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>life = obj_god.life*room_speed;
pop = obj_god.pop*10;
 alarm[0]=1;
gene=0;
kill = false;
m_result =0;
bucket[0] = 0;
pop_fit[0] =0;
init_move();



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (kill) instance_destroy();
else
{
    
            
    if(gene!=0)
    { 
        //calcula la media de fitnes y el maximo fit
            obj_god.med_fit=0;
            for(i=0; i&lt;pop;i++)
            {
                 obj_god.med_fit+=pop_fit[i];
                 if(pop_fit[i] &gt; m_result) m_result = pop_fit[i];
            }
            obj_god.med_fit/=pop;
            
    
            // llena el balde de genes
            ran = 0;
            counter =0;
/*
            for(r = 0; r &lt; pop;r++)
             {
                for(p=0; p &lt; pop_fit[r]*100 ;p++)
                {
                    bucket[counter] = r;
                    counter++;
                }
            }
*/
            //crea un a copia del areglo 
            for(i=0; i&lt; life;i++)
            {
                 for(j=0;j &lt; pop ;j++)
                 {
                    c_path[j,i] = path[j,i];
                 }
            }
             

            for(i=0; i &lt; pop;i++)
            {
           
           
                /*
                ran = clamp(0,counter-1,irandom_range(0,counter));
                rp1 = bucket[ran];
                ran = clamp(0,counter-1,irandom_range(0,counter));
                rp2 = bucket[ran];
                */
              
                // escoge 2 padres y los mescla
                rp1 = pick(m_result);
                rp2 = pick(m_result);

                 //mutacion
                ran = irandom(obj_god.mut)
                if (ran == 1)
                {
                    path[i,0] = irandom(360);
                    for(o=1;o&lt; life;o++)
                    {
                         path[i,o]+=random_range(-30,30);
                    }
                }
                else
                {
                    for(j =0; j&lt;life ; j++)
                     {
                      ran = irandom(1)
                      if(ran == 0)
                       {
                           path[i,j] = c_path[rp1,j];
                       }
                      else 
                       {
                           path[i,j] = c_path[rp2,j];
                       }
              
                    }
               }
               
               
    
                 ins = instance_create(x,y,rocket);
                 ins.index = i;
            
              }
              
    }
    else
    {
        init_move();
       for(i=0; i&lt;pop;i++)
       {
           ins = instance_create(x,y,rocket);
           ins.index = i;
       }
    }
     alarm[0] = life+3;//+3 para que le de tiempo de recivir el fitnes
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(10,110,"generacion = "+string(gene));
draw_text(10,130,"MAX fit = "+string(m_result));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
